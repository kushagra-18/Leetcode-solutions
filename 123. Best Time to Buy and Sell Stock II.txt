class Solution {
public:
    
    int f(vector<int>& prices,int idx,int buy,vector<vector<int>>&dp){
        if(prices.size()==idx)
            return 0;
        
        if(dp[idx][buy]!=-1)
            return dp[idx][buy];
        
        int profit = 0;
        if(buy){
            
            int taken = -prices[idx] + f(prices,idx+1,0,dp);
            int notTaken = f(prices,idx+1,1,dp);
            profit = max(taken,notTaken);
            
        }else{
        
             int taken = prices[idx] + f(prices,idx+1,1,dp);
             int notTaken = f(prices,idx+1,0,dp);
             profit = max(taken,notTaken);

        }
        
        return dp[idx][buy] = profit;
        
    }
    int maxProfit(vector<int>& prices) {
        
        int n = prices.size();
        
        vector<vector<int>>dp(n+1,vector<int>(2,0));
        
        for(int idx = n-1;idx>=0;idx--){
            
            for(int buy = 0;buy<=1;buy++){
                
                int profit = 0;
                
                if(buy){

                    int taken = -prices[idx] + dp[idx+1][0];
                    int notTaken = dp[idx+1][1];
                    profit = max(taken,notTaken);

                }else{

                     int taken = prices[idx] + dp[idx+1][1];
                     int notTaken = dp[idx+1][0];
                     profit = max(taken,notTaken);

                }
                
                dp[idx][buy] = profit;
                   
            }
            
        } 
        
        return dp[0][1];
        
        // return f(prices,0,1,dp);
        
    }
};